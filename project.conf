#
# The settings in this file configure the ontology build process.  The only
# setting that is absolutely required to build an ontology is "ontology_file"
# in the "Ontology" section.  However, most ontology projects will eventually
# need to customize the settings "dev_base_IRI" and "release_base_IRI", in the
# "IRIs" section, and "entity_sourcefiles", in the "Ontology" section.
#


[Reasoning]
#--------
# Settings for customizing the process of running a reasoner to add inferred
# axioms to the compiled ontology.
#--------

# The reasoner to use when generating inferred ontology axioms.  Currently,
# "ELK", "HermiT", and "Pellet" are the supported options.  If no reasoner is
# specified, HermiT will be used by default.  This setting is not case
# sensitive (e.g., either "HermiT" or "hermit" is fine.)
#reasoner = HermiT
reasoner = ELK

# The kinds of inferred axioms to generate when running a reasoner on an
# ontology.  This should be a comma-separated list of one or more of the
# following values:
#
#   "subclasses" (infer the class hierarchy)
#   "subdata properties" (infer the data property hierarchy)
#   "subobject properties" (infer the object property hierarchy)
#   "types" (infer individual types / class assertions)
#   "equivalent classes" (infer class equivalency axioms)
#   "disjoint classes" (infer class disjointness axioms)
#   "inverse object properties" (infer object property inverse relationships)
#   "property values" (infer property assertions for individuals)
#
# If no inference types are specified, the default is
# "subclasses, equivalent classes, types, subdata properties, subobject properties".
# This setting is not case sensitive (e.g., either "types" or "Types" is fine).
inferences = types

# If True, inferred axioms will be annotated as such when they are added to the
# compiled ontology.  If False or undefined, inferred axioms will not receive
# any annotations to indicate that they were inferred.
annotate_inferred = False

# Specifies the location of a file specifying classes to exclude from inferred
# class assertion axioms.  Inferred type assertions for individuals will
# typically include large numbers of assertions for high-level ontology
# classes, and these assertions are often neither very interesting nor very
# useful.  For large data sets, removing these assertions can save considerable
# space.  This setting should point to a file that contains a table with three
# columns: "ID", "Exclude class", and "Exclude superclasses".
excluded_types_file = excluded_types.csv

# If True, inverse object property assertion axioms and inverse negative object
# property assertion axioms will be directly materialized *prior* to running
# the reasoner, including assertions about symmetric properties.  This is
# useful for cases in which a reasoner that does not support inverses (such as
# ELK) must be used (e.g., for runtime considerations) on an ontology with
# inverse property axioms.  With this pre-reasoning step, many inferences that
# depend on inverse property pairs will still be correctly recovered even with
# a reasoner that does not support inverse properties.  However, it is very
# important to note that whether *all* inferences are recovered depends on the
# structure of the source ontology.  For example, inverse object property
# assertions will only be generated for object property assertions that are
# explicitly stated in the ontology; not for object property assertions that
# are implicit.  The default is False.
preprocess_inverses = True


